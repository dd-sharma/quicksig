import { createClientFromRequest } from 'npm:@base44/sdk@0.7.0';
import { jsPDF } from 'npm:jspdf@2.5.1';

Deno.serve(async (req) => {
  try {
    const base44 = createClientFromRequest(req);
    const user = await base44.auth.me();
    if (!user) {
      return Response.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const payload = await req.json();
    const testName = payload?.testName || "A/B Test";
    const interpretation = payload?.interpretation || {};
    const metrics = payload?.metrics || {};

    const doc = new jsPDF({ unit: "pt" });
    let y = 48;

    doc.setFontSize(18);
    doc.text(`QuickSig Business Report`, 48, y);
    y += 24;

    doc.setFontSize(12);
    doc.text(`Test: ${testName}`, 48, y); y += 18;
    if (interpretation?.executiveSummary) {
      doc.text(`Executive Summary:`, 48, y); y += 16;
      const lines = doc.splitTextToSize(interpretation.executiveSummary, 520);
      doc.text(lines, 48, y); y += (lines.length * 14) + 10;
    }

    const conf = interpretation?.meta?.confidencePct != null ? `${interpretation.meta.confidencePct.toFixed(1)}%` : "N/A";
    const uplift = interpretation?.meta?.upliftPct != null ? `${interpretation.meta.upliftPct.toFixed(1)}%` : "N/A";
    const visitors = interpretation?.meta?.totalVisitors != null ? `${interpretation.meta.totalVisitors}` : "N/A";

    doc.text(`Confidence: ${conf}`, 48, y); y += 16;
    doc.text(`Observed Uplift: ${uplift}`, 48, y); y += 16;
    doc.text(`Total Visitors: ${visitors}`, 48, y); y += 22;

    if (interpretation?.recommendation) {
      doc.text(`Recommendation:`, 48, y); y += 16;
      const recLines = doc.splitTextToSize(interpretation.recommendation, 520);
      doc.text(recLines, 48, y); y += (recLines.length * 14) + 10;
    }

    if (interpretation?.riskAssessment) {
      doc.text(`Risk Assessment:`, 48, y); y += 16;
      const r = interpretation.riskAssessment;
      doc.text(`Best case: ${r.bestCasePct?.toFixed?.(1) ?? r.bestCasePct}%`, 48, y); y += 14;
      doc.text(`Most likely: ${r.mostLikelyPct?.toFixed?.(1) ?? r.mostLikelyPct}%`, 48, y); y += 14;
      doc.text(`Worst case: ${r.worstCasePct?.toFixed?.(1) ?? r.worstCasePct}%`, 48, y); y += 18;
      if (r.riskNote) {
        const noteLines = doc.splitTextToSize(r.riskNote, 520);
        doc.text(noteLines, 48, y); y += (noteLines.length * 14) + 10;
      }
    }

    // Footer
    y = Math.max(y + 10, 760);
    doc.setFontSize(10);
    doc.text(`Generated by QuickSig â€¢ ${new Date().toLocaleString()}`, 48, 790);

    const bytes = doc.output('arraybuffer');
    return new Response(bytes, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${testName.replace(/[^a-z0-9\-]+/gi, "_")}_report.pdf"`
      }
    });
  } catch (error) {
    return Response.json({ error: error.message }, { status: 500 });
  }
});